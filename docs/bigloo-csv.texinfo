\input texinfo


@setfilename bigloo-csv.info
@settitle bigloo-csv

@syncodeindex tp fn 
@syncodeindex vr fn


@ifinfo

Copyright @copyright{} 2011 Joseph Donaldson 
@end ifinfo 

@titlepage
@title bigloo-csv
@author Joseph Donaldson

@c The following two commands start the copyright page.
@c @page
@c @vskip 0pt plus 1filll
@end titlepage

@node    Top,       Overview, ,         (dir)
@comment node-name, next,          previous, up
@menu
* Overview::    What is this bigloo-csv library?.
* API Reference::
* Example::  
* Index::   
@end menu

@node    Overview, API Reference, Top,      Top
@comment node-name,     next,          previous, up
@chapter Overview

The bigloo-csv library supports the parsing of csv and csv-like data. By default, it enables the parsing of comma, tab, and pipe separated data. In addition, facilities are provided that enable extending the library to support additonal csv-like formats. 

The rest of this document describes the bigloo-csv application programming interface.

@node API Reference,Example,Overview,Top
@comment node-name, next,          previous, up
@chapter API Reference
.

@menu
* read-csv-record::
* read-csv-records::
* csv-for-each::
* csv-map::
* make-csv-lexer::
* +csv-lexer+:: comma separated values
* +tsv-lexer+:: tab separated values
* +psv-lexer+:: pipe separated values
@end menu

@node read-csv-record, read-csv-records, ,API Reference
@comment node-name, next,          previous, up


@defun read-csv-record input-port [custom-lexer]
@code{read-csv-record} has one  required argument, the input-port of the csv data to parse, and an optional argument indicating the lexer to use, by default the lexer supporting standard csv files. It returns a single record, as a list, or @code{#eof-object}. Upon error, it will throw an @code{&invalid-port-error} or @code{&io-parse-error} exception.
@end defun  

@node read-csv-records, csv-for-each, read-csv-record ,API Reference
@comment node-name, next,          previous, up

@defun read-csv-records input-port [custom-lexer]
@code{read-csv-records} has one  required argument, the input-port of the csv data to parse, and an optional argument indicating the lexer to use, by default the lexer supporting standard csv files. It returns all of the records, as a list of lists, or @code{#eof-object}. Upon error, it will throw an @code{&invalid-port-error} or @code{&io-parse-error exception}.
@end defun  


@node    csv-for-each,csv-map ,read-csv-records, API Reference
@comment node-name, next,          previous, up

@defun csv-for-each proc input-port [custom-lexer]
@code{csv-for-each} has two required arguments, a procedure to apply to each record and the input-port of the csv data to parse, and an optional argument indicating the lexer to use, by default the lexer supporting standard csv files. It returns @code{#unspecified}. Upon error, it will throw an @code{&invalid-port-error} or @code{&io-parse-error exception}.
@end defun  

@node    csv-map,make-csv-lexer,csv-for-each, API Reference
@comment node-name, next,          previous, up

@defun csv-map proc input-port [custom-lexer]
@code{csv-map} has two required arguments, a procedure to apply to each record and the input-port of the csv data to parse, and an optional argument indicating the lexer to use, by default the lexer supporting standard csv files. It returnsthe results of applying @code{proc} to each record as a list. Upon error, it will throw an @code{&invalid-port-error} or @code{&io-parse-error} exception.
@end defun  


@node    make-csv-lexer,+csv-lexer+,csv-map, API Reference
@comment node-name, next,          previous, up

@defmac make-csv-lexer sep  quot
@code{make-csv-lexer} has two required arguments, a character used to separate records and a character for quoting. It returns custom lexer.
@end defmac  

@node    +csv-lexer+,+tsv-lexer+,make-csv-lexer, API Reference
@comment node-name, next,          previous, up

@defvar +csv-lexer+
@var{+csv-lexer+} is a bigloo-csv lexer supporting the standard comma-separated value format.
@end defvar  

@node    +tsv-lexer+,+psv-lexer+,+csv-lexer+, API Reference
@comment node-name, next,          previous, up

@defvar +tsv-lexer+
@var{+tsv-lexer+} is a bigloo-csv lexer supporting the tab-separated value format.
@end defvar 

@node    +psv-lexer+,,+tsv-lexer+, API Reference
@comment node-name, next,          previous, up

@defvar +psv-lexer+
@var{+psv-lexer+} is a bigloo-csv lexer supporting the pipe-separated value format.
@end defvar 



@node    Example,Index ,API Reference, Top
@comment node-name, next,          previous, up
The following is a simple example of using the bigloo-csv library. It parses a single record from the given csv data and prints it.

@example
@cartouche 
(module example
   (library bigloo-csv)
   (main main))

(define +csv-data+ "dog,cat,horse\npig,cow,squirrel")

(define (main args)
   (let ((in (open-input-string +csv-data+)))
      (unwind-protect              
         (print (read-csv-record in))
         (close-input-port in)))) 
@end cartouche
@end example



@node    Index,    ,Example, Top
@comment node-name, next,          previous, up
@unnumbered Index
@printindex fn

@contents
@bye  
